Principio: Es Front-End

    Es un lenguaje del 1995 basado en C, se le denomina lenguaje "Del lado de cliente" porque se ejecuta en entorno de navegador, si no
    esta en navegador, se necesitara un emulador que genere un entorno que lo acepte, si queres que pase en una calculadora,
    tenes que hacer lo que queres de java y también el emulador para que funque., a diferencia 
    de otros lenguajes que corren en el servidor. La mayoría de lo que vamos a escribir va a ser código que también funca en JavaScript, 
    ECMAscript engloba a JavaScript kinda.

    Orientado a prototipos, multiparadigma e interprendo, Lenguaje orientado a objetos. Es un lenguaje interpretado, lo que significa
    que lee el código y lo interpreta y procesa en tiempo de ejecución (lee, ejecuta la linea, lee, ejecuta) a diferencia de los 
    lenguajes compilados que leen todo el código, lo interpretan y lo ejecutan de una, no linea linea. 

    Se usa para hacer manipulación de documentos web, la interacción con el usuario y un toque con el servidor. 
        - Cambiar todo el contenido de un documento web (letra, colores, animaciones, etc)
    - Enviar Información a través de la red de servidores remotos, descargar archivos, etc.
    - Almacenamiento local en el navegador (recuperar, almacenar info durante info y visualización del docu web.)
    
    Para que NO se usa:------------------------------------------------------------------------------------------------------------------------
    - No acceso a disco duro, eliminar info.
    - Acceso a la RAM, ROM.
    - Acceso a la tarjeta RED o procesadores.
    - Trabajar del lado del servidor.
    -------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
Vincular archivo JavaScript:
    Interna dentro de una etiqueta <script></script> (que te permite escribir otro lenguaje adentro del html, no muy util)
    Externa: <script type="text/JavaScript" src="nombre.js"></script>, la etiqueta va en 
    -------------------------------------------------------------------------------------------------------------------------------------------
    Todas las palabras de inicio suelen ir con minúscula 
    Para ver si funca lo que escribimos usaremos la consola del navegador usando f12 (inspeccionar) y probamos el código ahi. 
    Se puede probar el código dentro de la consola sin escribirlo en el código del archivo.  (shift+enter salto de linea).
    Not defined: No aclaraste que significa algo.
    Te dice en que archivo esta en el error.
    Te dice donde hay un error en la linea especifica, dice donde el código no se puede ejecutar, un error antes puede hacer que una linea después
    no funque.
------------------------------------------------------------------------------------------------------------------------------------------------
Comentarios y mensajes básicos:

	// una linea // , /* mas de una linea */ (Si seleccionas un bloque y vas a file podes meterle comentario a todo)

	En los textos podes concatenar contenido alert("bienvenido " + variable), asi pones la palabra bienvenido + la variable que pinte.
	concatenación con backstip o algo ase, Alert(`Hola`) (busca como carajos funca)

	console.log(): mensaje que se ve en la consola.
     console.error(): muestra un icono rojo de error con el mensaje coloreado en rojo.
     console.warn(): muestra un icono amarillo de advertencia.
     sole.dir(object). Imprime una representación del objeto con JavaScript.
     console.dirxml(object). Imprime una representación en XML de los elementos descendientes del objeto. 
     console.clear(). Limpia la ventana de la consola.
     console.table(). Hace una tabla.
	prompt(): despliega un mensaje en la ventana del navegador con una casilla para un valor, que es un string
	alert(): despliega un mensaje en la ventana del navegador con el texto que reciba
	confirm(): pregunta de confirmar o cancelar.
------------------------------------------------------------------------------------------------------------------------------------------------
Variables , constantes y hoisting: 

    Una variable declarada con var es sometida a hoisting, (levantamiento), la declaración de la variable es "levantada", básicamente
    un var, al ser declarada, ya existe en la pagina, pero si le das un valor en el fondo, va a existir, va a estar declarada
    pero no va a tener valor hasta que no lea el fondo, existe pero no tiene valor hasta que no lo lea, al contrario, let Y
    const no hacen esto, si declaras Let al final, y la llamas antes, no va a existir de una, no tiene valor y no existe.


    Espacio de la memoria del ordenador que guarda info durante la ejecución del programa, const declara una variable que 
	no puede ser afectada, let y var si pueden ser afectadas. 
	(memoria volátil, dura lo que dure la ejecución) se declaran y se asigna un nombre para identificarlas: 
	
	Var y Let declaran variables, pero var declara globalmente, mientras que let declara de forma local, dentro de bloques. Mas variables
	usadas constantemente usan mas recursos, Var mantiene global, lo que las mantiene al mismo tiempo y gasta, let las usa y después de 
	terminar su uso (sale de su bloque de programación), deja de gastar recursos.
	
	Declarar Variables: Let nombre = "valor" ----> ahi declaraste una variable que se llama "nombre", este nombre solo puede contener letras, guion 
	bajo como signo de espacio y signo de peso($).Ahora podes "llamar" la variable en la consola, como una variable declarada, cuando la nombres, 
	te va a devolver el valor que hayas declarado.
	
	Tipos de datos: JavaScript es débilmente tipado, o dinámico, acepta strings, number, boolean, null, undefined, symbol y object (object, colección de
	datos), etc. Son valores que le podes dar a las variables.
	
	Ahora podes guardar datos, declarando una variable con un comando dentro, por ejemplo, let nombre = prompt("Dime tu nombre"), te pregunta, 
	pones tu nombre y después cuando le preguntes a la consola "nombre", te devuelve lo que hayas puesto ahi como variable.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Tipos de datos:
    Son los distintos tipos de información que podes ingresar en variables, números, strings, etc.

    number: En javascript solo existe un tipo de datos numérico, y pueden tener valores en base 10, números de 0 a 9, valores
    en base 8, números de 0 a 7 (para escribir un numero que siga a 8 seria con 0, 045??) y el sistema en base 16 o mejor 
    conocido como hexadecimal, que tiene de 0 a 9 y de A a F.

    La suma de números y strings numéricos: 23 + "33" = 2333.

    String: guarda texto,  Siempre que escribamos una cadena de caracteres debemos utilizar las comillas dobles (""), 
    simples ('') o invertidas (``). Todo lo escrito entre comillas no tiene limites de reglas como el demás texto,
    vale como un texto sin significado para javascript.

    Caracteres de escape en cadenas de texto: Son una serie de caracteres especiales que sirven para expresar en una cadena de 
    texto determinados controles como puede ser un salto de linea o un TAB, estos son los caracteres de escape, se escriben
    con un / y un carácter para que signifique algo en especifico: Salto de línea:\n, Camilla simple: \', Camilla doble: \"
    , Tabulador: \t, Retorno de carro: \r, Avance de página: \f, Retroceder espacio: \b, Contrabraza: \\.

    Booleanos: Guardan info de True o False (Si o No), se usan en operaciones lógicas.

    Funciones de datos: 

    ParseInt() y parseFloat(): Son funciones creadas para analizar un string y devolver un numero si es posible,los espacios finales
    e iniciales se ignoran. JavaScript analiza la cadena para extraer las cifras que encuentre al principio, empezando de izquierda a 
    derecha, si lo primero que lee es un numero, entonces todo lo que siga siendo numero va a ser lo que saque, si lo primero que lee
    es una letra u otra cosa no numérica, entonces va a tomarlo como que no hay números en la cadena y va a resultar en un NaN (Not a 
    number). Cuando el valor no es un string, JavaScript lo convierte en string,en el caso de objetos, se hace llamando al metodo 
    toString().

    parseInt(string, radix) - Conversión de string a entero: Radix es opcional y representa la base en la que estamos trabajando,
    normalmente se toma el valor en base decimal. parseInt() tiene un parámetro extra para indicar la base del número (radix).

    parseFloat(string) - Conversión de string a número en coma flotante: 
    El número siempre se interpreta como decimal, independientemente de cualquier prefijo que le pongamos (0 para octal ó 0x para
    hexadecimal). parseFloat() no admite radix. Todos los números se consideran en base decimal.

    La diferencia con el anterior, además de admitir decimales, es que los números en coma flotante admiten la notación exponencial,
    del tipo "314e-2" o "0.0314e+2". Si la función encuentra un carácter que no sea un número (0-9), un signo (+ o -), un punto decimal o un exponente, ignorará 
    todos los caracteres que vengan a continuación.
    -parseInt() y parseFloat() pueden extraer un número al principio de un string.
    -parseInt(), Number() y '+' interpretan el prefijo '0x' como número hexadecimal, parseFloat() no.
    -parseInt() no entiende la notación exponencial, todos los demás si.
    -parseInt() y parseFloat() convierten el string vacío en NaN.
    -parseInt() y parseFloat() de un boolean es NaN.








    number(): A diferencia de los anteriores, este y conversion implicita (el que sigue), son especificamente para conversion de 
    tipos, mientras que parse() es para extraer un numero de un string, funciona como un conversor a tipo numérico,
    ignora los espacios al principio y al final, pero, a diferencia de los métodos anteriores, cuando un string contiene caracteres
    no convertibles a números el resultado siempre es NaN, no trata de 'extraer' la parte numérica. Number("") es 0
    igual que con " ". A los  booleanos los convierte en 1 y 0 (true false) y también puede expresar
     resultados Q en boolean 1 o 0 si hay una operacion dentro.

    Conversión implícita '+'

    La conversión implícita es una forma de conversión rápida a número. Podemos utilizar cualquier 
    operación que fuerce al intérprete a realizar una conversión implícita de tipos pero que no varíe el operando,La forma más
    utilizada por su simplicidad es +var. El operador unitario + no cambia el valor de var pero lo convierte a número. No confundir
     con ++var que sí cambia el valor, sumándole uno. Este tipo de conversión, igual que Number(), devuelve NaN si el 
     string contiene caracteres no numéricos. Como veremos en los siguientes ejemplos, 
     esta forma de conversión es equivalente a Number() y devuelve los mismos resultados.

     -Si el string contiene caracteres no numéricos, Number() y '+' no lo convierten, devuelve NaN.
     -Cuando el argumento es un objeto, parseInt() y parseFloat() llamarán al método .toString() antes de analizar
      la cadena. Number() y +var llamarán primero a .valueOf() y después a .toString() si es necesario.
     -Number() y '+' convierten el string vacío en 0.
     Number() y '+' de un boolean devuelve 0 para false y 1 para true.
---------------------------------------------------------------------------------------------------------------------------------------------------
Operadores: 
        https://app.code2flow.com/ Convierte código en flujo, linea por linea, podes usarlo pa probar cosas de if.
	    Son caracteres especiales reservados para modificar, comprobar, asignar o reasignar los datos guardados en variables,
		Aritméticos: Suma +, resta -, multiplicación *, división /, resto % y potencia ** (X elevado a algo)
		El símbolo de + también se usa en los strings para concatenar cosas, pero es mejor usar backticks:
        const name = 'Gerardo';
        const surname = 'Fernández';
        const telephone = '123 123 123';
        // "Old syntax"
        const userInfo = 'User info: ' + name + ' ' + surname + ' ' + telephone;
        // "New syntax"
        const userInfo = `User info: ${name} ${surname} ${telephone}`;
		
		
		Asignación: le dan un nuevo valor a alguna variable después de hacerle una operación el resultado que guarde va a reemplazar el anterior, si 
		declaro una variable numérica, puedo usar "nombre var" += , -=, *=, /=, %= y **=, y a la derecha el numero con el que quiero que opere:
		let numero = 10
		numero += 5
		15
		
		Incremento: ++ o -- ,suman o restan 1, literalmente, 1. Y cambia si se ponen adelante o atrás --menos o menos--, dependiendo de como lo escribas, En
		ambos casos realiza la operación de sumar o restar, pero si esta adelante, te muestra el resultado del numero +1, si esta despues, te muestra el numero
		sin haberlo sumado, pero lo hizo.
		let numero = 10
		numero ++ 5
		6
		
		Comparaciones: Asi no mas siempre devuelven True o False 
		<,>, >=, <=, ==, ===, !==. 
		Los primeros 4 son conocidos, después, el == comparación simple, === c.estricta, "10"(string)== 10(numero), da true, no importa el tipo de dato,
		mientras que "10" === 10 , False, porque "10" es un tipo de dato string, mientras que 10 es numérico, son mas condiciones de igualdad.
		(podes usarlo en comparaciones de igualdad con exactamente los mismos tipos de datos, info de otro servidor, de otras apps, cosas ase).
		0 == false, true      También esta "20" != 20 desigualdad simple (es lo mismo que el símbolo de igual tachado)
		0 === false, false
		(googlealo).
		
		Lógicos: AND(&&) OR(||) not(!)
		AND: ambas condiciones se cumplen.
		OR: una u otra se cumplen.
		NOT: Invierte el booleano. Niega lo que digas.
		
		Condicionales: Se leen de izquierda a derecha, se usan paréntesis para ordenar la precedencia. Si quiero que haga algo primero, pongo en paréntesis
		para que resuelva  eso primero y después haga la comparación general.
		
		if, si la condición es verdadera, se ejecuta
		Else, si el if resulta falso, va después del if.
		Switch para especificar muchos bloques Condicionales de código que se ejecutaran.
		
		if (condición) {
		Esto se ejecuta si condición se cumple.
		} else if (otra condición) {
			lo que pasa en caso contrario, no se cumplió condición.
		} else {
			
		} Esto es anidar, se pueden anidar condiciones distintas hasta que hagan lo que quieras.
		
		Puedo usar otras variables ya creadas o crearlas dentro del if, pero no crear la variable en la condición, porque una condición no crea una variable.
		La variable que crees dentro del if va a borrarse después de hacer lo que tenga que hacer en el if, si queres trabajar con una variable que cambia
		con el if, declaras la variable afuera, y haces que cambie adentro.
		Asi también puedo usar cualquier comando, que suelen devolver un boolean o cosas asi, por ejemplo if (alert("esta buena la pagina?)) { y decís algo }, 
		si confirman, devolverá lo de adentro, porque confirmar da true.
		
		Operador ternario: 
		
		Operación de comparación que nos deja poner mensajes o valores:
		
		let numero = 23
		let resultado = numero >= 13 ? "Es mayor a 13" : "Es menor a 13"
		
		Esta operación compara, y dependiendo del resultado te tira uno u otra opción. (googlea bien como funca).
		
		Otros condicionales:
		AND : a && b , devuelve a si es flase, sino b 
		?: a ? b 
		
		Switch: funciona como un bloque condicional if/else, verifica varias cosas al mismo tiempo:
		
		Switch(variable) {
			case "algo" :
				code block1;
				break:
			case "algo2":
				code block2;
				break:
			default:
				code block3;
		}
		
		Esto se lee como: Si el primer case es = a "algo", envía code block1, sino, verifica si da el 2, y sino da el 3, verifica si tu variable es 
		igual a lo que tengas al lado de case.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Bucles:

	While: permite hacer algo varias veces, lo podes poner adentro del Switch para repetir la situación hasta que se cumplan las situaciones, 
	si alguien quiere saber cuanto dinero hay en cuenta, si tiene 0, lo manda al 0 y le vuelve a preguntar si quiere ver la plata o salir,
	si le da de nuevo, ve el 0, sino, sigue de largo. También se puede con números y asi:
	
	let i = 0;
	while (i<10) {
		console.log("El numero es " + i)
		i ++
	} Esto significa, que hasta que i no sea mayor a 10, esto se repite, sumando 1 a i.
	
	dowhile: do while hace por lo menos 1 sola vez el ciclo que quieras hacer. sin verificar la condición en la primera vez, y despues verifica 
	si cumplís o no la condición. Se escribe empezando con do {} y sigue con while despues de la llave.
	
	For: es un while pero en una sola linea:
	
	for(let i=0; i<10; i++) {  (En cada condicion puedo poner parametros o valores de otras funciones.)
		console.log("El numero es " + i)
		i ++
	}  en while temes que tener una linea para inicializar, contar, y otra cosa mas.
	El for se usa para cant de veces, cantidades (números) mientras que while se puede usar para comparaciones de respuestas y asi,
	toma distintos valores, for no.	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Funciones: 
    Bloque de código que agrupa, encapsula, o estructura ciertos comando, operaciones, etc, que puede ser reutilizados al llamar el nombre
    de la función, lo importante es que al ser reutilizabas, las definís una vez y ya no tenes que definiría de nuevo. En vez de 
    escribir el código cada vez que queres hacer algo, solo llamas.
    
    Declarar funciones:  

    Forma declarativa o algo ase (mas antigua):    
    function nombre(variables) {
    // Código a ser ejecutado
    }
    
    Asi, declaras la función con algún nombre, especifico para distinguirla, ahora cuando la llames/ invoques, va a hacer lo haya dentro 
    de las llaves. Para llamarla tenes que hacerlo con nombre(), el paréntesis es obligatorio pa que cumpla lo que hay dentro,
    si no pones el (), te va a mostrar como una variable, te mostraría toda la función como esta escrita : function nombre.....
    (console.log(nombre) muestra lo de adentro de la función también, console.log(nombre()) la invoca).
    -------------------------------------       
    Forma expresada o expresa:  Se usa un poco 
    A diferencia de crear un función, guardas una función dentro de una variable, declaras una variable y dentro le pones la función
    lo que significa que al ser una variable, toma la propiedad de hoisting de variables en JavaScript, que no pueden ser llamadas 
    antes de ser declaradas como variables. (Con una función como la primera, la función ya existe, y la podes llamar, la info la tiene
    el la pagina, mientras que si intentas ejecutar una función que todavía no esta declarada, no podes usarla )
    
    const prueba = function() {
    
    }
    -------------------------------------
    Forma mas importante funciones: Arrow functions: Es mas fácil de leer, declaras la variable, nombre, = (parámetro) y 
    aca viene "=>", que significa que eso es lo que se ejecuta, Si es una sola linea, la flecha también sirve 
    como return, y no necesita {}. Si tiene mas  de un renglón, entonces va con {} y hay que aclarar return.
    
    const prueba = () => "Hola"    Es una función de una sola linea y no necesita return en este caso, es implícito.
    
    const prueba = () => {
        algo1
        algo2
        return algoX
    }
    Esta por otro lado al ser mas de una linea si necesita el return.
    Si tiene 1 parámetros, podes no usar paréntesis, si tenes mas, tenes que usarla.
    

    
    
    Return palabra clave: Sirve para sacar info de una función.Permite retornar un valor de adentro de una función, 
    lo podes usar para hacer algo dentro de la función o hacer algo dentro de la función y pasarla a otro lado.
    function sumar() {
    let resultado = 33 + 18
    
        return resultado;
    }
    let suma = sumar();
    console.log(suma + 7); ---> 58 Aca la función cuando es ejecutada hace la suma y al usar return, retorna o contesta en este caso la 
    variable resultado. Es importante para sacar datos de dentro de una función. Cualquier instrucción debajo de un return corta la 
    función, si hay un return, no importa el código de abajo, no va a ser leído, es el fin de una ejecución.
    
    Parámetros y argumento: Son variables que se usan dentro de la función no mas.
    Nos permiten pasarle info a la función para que trabaje con esa información dentro. Donde esta el paréntesis al lado del nombre, 
    le pones nombre al parámetro, puede ser Super simple el nombre, le pones la cantidad que quieras, y asi cuando invoques la función
    le podes aclarar que valores queres que sean introducidos en la función. ej:
    function sumar(a, b) {
        let resultado = a + b;
            return resultado;
    } entonces, llamando la funcion asi: sumar(10,20), esto te va a devolver 30.
    
    Puedo enviar parametros de otras funciones para dirigir un resultado o info de algun lado dentro de otro.
	let parametro = otra cosa.

	function caminar(parametro){
		......
	}  Y asi, con el parametro declarado, lo puedo llamar.
	do

	Callbakcs:Es Mucho muy importante en Back-End
	Es una funcion que se pasa a otra funcion como parametro, hay algunas funciones que necesitan callbacks obligatoriamente,
	los callbacks son funciones asíncronas, podes llamar una funcion de nuevo o kinda. (googleemos), Cuando trabajamos en asincrono, 
	podemos pedir un dato y puede seguir leyéndose todo, y cuando llegue el dato vuelve a esa digamos.
	Para escribir un callbacks, creas la funcion original, y otra funcion aparte, después cuando escribas los parámetros, usas uno como el nombre
	de la funcion, recibís parametro, y despues en vez de return, escribís el nombre del parametro, que  va a ser una funcion,
	digamos que el parametro se llama (nombre), entonces al final de la funcion escribir nombre(el resultado del a funcion)
	Al hacer esto, el resultado que quieras de la funcion va a ser procesado como parametro en la otra funcion. 

	const sumar = (a, b, volar){
		let resultado = a + b;
		volar(resultado)
	}  Volar es otra funcion. sumar(1, 2, function(suma)){
		mmmmmmm
	} Búscate una explicación alguna vez en Google, ta medio falopa.
-----------------------------------------------------------------------------------------------------------------------------------------------------
Objetos: 
 Tipo de dato que nos permite crear colecciones de variables.
 Literales:
 Un objeto es una colección de propiedades, y una propiedad es una asociación entre un nombre (o clave) y un valor.
 ej: Const superheroe = {alias: "superman" , nombre: "ClarK"}, las propiedades aca serian las claves "alias" y "nombre"
 y sus valores "superman" y "clark" respectivamente.
 A cualquier variable lo podes convertir en objeto y a cualquier objeto en variable. Y a los objetos podes ponerle todas las 
 propiedades que quieras.
 Declaras la variable, el nombre y = {}  (unas llaves vacias en principio, ahi va a tener datos del objeto),
 Los objetos tienen propiedades, que son definidas mediante comas, la nombre, dos puntos, y ahi un string, estas van encerradas 
 en las llaves.
 Cada propiedad posee atributos propios:

 valor: que es lo que solemos usar.

 configurable: nos permite definir si los atributos va a poder ser modificados

 Enumerable: Controla si la prop va a ser mostrada cuando se enumeren las props del objeto,

 writable: Nos permite denifir si el valor de una prop va a poder ser modificado o no.

 Leer los valores: 
 (objeto.clave) te devuelve el valor al que te estes refiriendo
 (objeto["propiedad"]) tambien funca igual.
  Para acceder a los atributos usamos: 
  Object.getOwnPropertyDescriptor(targety, propiedad), Con esto, en targety buscas el nombre del objeto, y en propiedad, nombras como string la el valor que 
  queres que tiene el objeto. Esto te va a enlistar las propiedades de ese valor.

 Object.defineProperties(myObj,propiedad, {atributos}) : Con esto, myObj elegis el objeto, propiedad,

 object.key(objeto): Devuelve un arreglo que contiene todos
 los nombres de las propiedades

 object.values: Devuelve un arreglo que contiene todos
 los valores correspondientes a las propiedades.

 Una vez generado el objeto, podes llamarlo para ver sus propiedades y valores. Ahora, si queres buscar algo especifico dentro de un objeto, 
 lo podes buscar especificando la prop, ej: Un objeto llamada menu y queres buscar postres digamos: "menu.postres", eso te va a devolver
 todos los valores que esten en postres. Tambien se hace con menu[postres]

 Para agregar propiedades a un objeto, solo hay que nombrar el objeto, ponemos punto, nombramos la propiedad y el valor que quieras:
 Si queres agregar una nota al objeto "estudiante", escribis: estudiante.nota = 8 , y ahora se creo la propiedad nota en el objeto 
 estudiante.

 Y al mismo tiempo, para borrar una propiedad de un objeto es escribiendo "delete", y nombras la prop, en el caso anterior, si queremos
 borrar la prop de la nota del estudiante, haces: delete estudiante.nota  , asi, ya es eliminada junto con su valor. 

 For...in: Es un bucle especifico para recorrida de objetos, se fija cuantos pares hay.
 Basicamente, for in es una funcion que va a hacer algo que quieras, lo que escribas dentro, a cada uno de las propiedades del 
 objeto elegido. En el ejemplo, para cada prop del "objeto", le esta pidiendo que imprima las claves = valores.
 for (const prop in objeto) {
    console.log(`obj.${prop} = ${obj[prop]}`)  
 } Produce las props y valores. 
 
 for (prop in estudiantes) {
    console.log(`En la propiedad ${prop} esta el valor ${estudiante[prop]}`) o ("nombre de propiedad "+ prop + " tiene el valor " + estudiante[prop])
 }  
 Esto te va a devolver una lista, de la cantidad de propiedades que tengas y sus valores, con un texto que seria:
 En la propiedad postre esta el valor helado. y asi seguiria haciendo con cada propiedad. Se suele usar sin poner texto y solo sacando los valores
 o propiedades que quieras.
 for (prop in estudiantes) {
    console.log(prop)
 }  enlista las propiedades que tenga el objeto, si pones estudiantes[prop], te da los valores de cada prop.

 Metodos: Funciones guardadas en un objeto
 Sirve para llamar funciones especificas que queremos asociar a un objeto, el console es un metodo.

 Palabra reservada this, cuando la pones, hace que se refiera al objeto que esta guardando la funcion en este caso, por ejempl:
 tenemos la prop sonido: "hola", despues podemos hacer saludo: function(this.sonido) , y entonces cuando querramos usar el sonido
 escribimos el nombre del objeto.sonido.

 Objetos funcionales: se crean a partir de funciones y nos permiten denifir moldes para luego realizar copias de nuestros objetos con mismas 
 propiedades pero distintos valores. Declaras esta funciones dentro de una variable con el nombre que quieras.

 Objetos de clase: Se suele usar con integraciones de otros sistemas que no aceptan objetos, para simular una clase.
 Se usa la palabra 
 class mascota {
    constructor(nombre,familia,raza) {
        this.nombre = nombre
        this.familia = familia
        this.raza = raza
    }
 }
 const rayo = new mascota(rayo, chiuhuahua,algo ma)
----------------------------------------------------------------------------------------------------------------------------------------
Arrays:
	Son colecciones de datos en formato de matriz o vector, nos permiten agrupar conjuntos de valores relacionados en una misma 
	variable. Un arreglo simple no tiene nombre como los objetos, sino que una posicion en el vector o matriz, lo mas comun suele
	ser objetos dentro de arreglos, y sirven para poner datos de forma secuencial. Son estructuras dinamicas que se pueden ir cambiando
	y arreglando cuando quieras.
	Una de las propiedades de los arrays es length, la cantidad de datos que tengo, (cardinal), siempre teniendo en cuenta que si tiene 10 obejtos,
	entonces va a tener 9 indices, porq el primero es 0. 
	Cuando busques con indexOf(valor), esto nombre.indexOf(segundo) ---> te devuelve "segundo", bueno, si le pedis un valor que no esta dentro, te 
	va a devolver el valor de -1.
	
	Estructura: const nombre = ["primerdato","segundo","tercero"] 
	Aca es con strings, pero puede tener cualquier dato.
	Las posiciones se conocen como indice, y SIEMPRE comienza desde 0, el primerdato esta en la posicion 0.
	
	Para hablar de un dato, ej: console.log(nombre[segundo]); esto imprime "segundo"
	
	recorrer arreglo:
	ej: frutas.forEach(function(dato){
		console.log(dato)
	})
	ej: frutas.forEach(dato => console.log(dato))
	
	Estas dos son exactamente la misma funcion, una normal y la otra en function.
	
	Cambiar valor:
	nombre[segundo] = banana, entonces ahora en el array, donde iba "segundo" ahora va a decir banana.
	
	Array Methods: Son funciones nativas, cuando generas un arreglo, automaticamente se comporta como un objeto, y al ser asi, tiene las funciones nativas, que se llaman
	metodos.
	
	Añadir o eliminar datos:
	push(): agrega un valor al final y retorna
	el nuevo length.(te devuelve la longitud nueva con el valor)
	
	unshift(): agrega un valor al principio y
	retorna el nuevo length.
	
	pop(): elimina el último valor y lo
	retorna.(te devuelve el valor que elimino)(una accion recurrente es guardar la info que eliminaste declarando como variable let pop(), y eso te guarda
	el dato que hayas eliminado, y despues podes agregarlo con push.)
	
	shift(): elimina el primer valor y lo
	retorna.
	
	Concatenar elementos: Nos permite combinar arrays o crear cadenas de texto de los valores de un mismo array:
	
	concat(): combina 2 o más arrays
	pasados por parámetro.
	
	ej: let precioRemeras = [100,200]
		let precioMedias = [50,40]
		const precios = precioRemeras.concat(precioMedias)
		console.log(precios) ----> devuelve [100,200,50,40]
	
	join(): crea una cadena de texto a partir de todos
	los valores de un array. Recibe por parámetro un
	separador de elementos de forma opcional.(El parametro va a ser lo que queres que este en medio de cada string, puede ser un guion, un punto, nada.etc.)
	
	Separar o cortar:
	
	split(): creamos un array a partir de una
	cadena de texto.
	El parámetro es la condición que
	separa a los elementos en la cadena. (Si tenes un texto, pones que simbolo queres que sea el que divida, y entonces eso va a dividir el texto en base a 
	lo que hayas puesto, por ej: precios.split(","), entonces digamos que "precios" tiene un texto, puede ser una variable o cualquier string, entonces
	donde haya comas, va a separar cada segmento en un valor para un array, digamo precios = esto,es,un,texto ---> [esto,es,un,texto].
	Si separa con nada (""), separa caracter a caracter.)
	
	slice(): devuelve una porción del array desde
	un rango definido.
	Por parámetro pasaremos la posición inicial
	y final de los elementos a cortar. (Le aclaras en cual indice empezar y en cual terminar(excluyente el segundo), saca especificamente estos, y no 
	te desarma el array original, sino que creo uno nuevo con los elementos que hayas sacado.)
	
	splice() : le digo que valor quiero sacar aclarando su indice, y el segundo valor es cuantas posiciones queres que borre de tu original, y podes poner
	un tercer parametro que dice que info queres que pongas, podes escribir tantos parametros como quieras al final.
	Sirve para agregar cosas donde quieras, si pones (1,0,"algo","cosa"), elegiste que en el indice 1, elimines 0 cosas, osea que no saca el elemento, y parado
	ahi, mete "algo" y "cosa".
	
	Ordenar:
	sort(): array.sort() ordena alfabeticamente los elementos del array.
	Si queres usarlo para ordenar numeros de menos a mayor, sort no funca del todo, porq tomaria que 10 y 100 van uno al lado, porq tienen 1 y 0, es como a y b.
	Para eso podemos hacer : precios.sort((a, b) => a- b); Entonces, esto basicamente dice que si es verdadero, lo pone, si es falso, lo mueve y asi.(medio rari)
	
	Array functions:
	
	Son metodos de array que originalmente recibeun una funcion de callback por parametro para obtener cierto resultado:
	ForEach(): Recorre automaticamente cada uno de los datos de los array, y ejecuta lo que vos quieras por cada dato.
	ej: frutas.forEach(dato => console.log(dato)). Esto imprime todos los datos del array.
	
	Validadores: Son dos "If" concatenados, el every() es que TODOS los datos cumplan la condicion, mientras que some() solo pide que UN dato cumpla.
	every(): verifica si todos los elementos en
	el arreglo pasan la prueba implementada
	por la función dada.
	
	some(): verifica si al menos uno de los elementos
	en el arreglo pasan la prueba implementada por
	la función dada.
	
	const todosPrecios = precios.every(function(dato){
		dato > 6
	}) 
	const todosPrecios = precios.every(dato => dato > 100)
	console.log(todosPrecios)
	
	reduce(): reduce(): se ejecuta por cada elemento del array y va acumulando en una variable el
	valor anterior sumando el valor actual de esa iteración.
	
	recibe 2 valores, total, que acumula, y value, que indica otro valor, (googlea):
	precios = [1,2,3,4,5,6]
	
	const sum = precios.reduce((total,value) => total + value, 0)
	console.log(sum) --> Devuelve 21 (1+2+3+4+5+6), justo en este caso es asi.
	
	map(): Recorre un arreglo y le mete un cambio que es un callback (funcion como parametro), y despues con eso crea un array nuevo con los datos cambiados
	de esa forma: Digamos que es un array al que le inyectas la funcion que pinte, es SUPER IMPORTANTE.
	
	Filter(): Filtra lo necesario basado en una condicion y te devuelve un array nuevo
	filter(): filtra los elementos que cumplen cierta condición. Podríamos usarlo cuando
	tenemos un array y necesitamos filtrar datos.
	
	find(): busca en un arreglo según una condición y devuelve el primer valor que logre
	cumplirla. 
	
	Matrices: Simula base de datos por asi decirlo, sirven para crear conjuntos de colecciones de datos, y se van dividiendo por bloques o filas.
	Podes verlo como qwue cada bloque puede tener muchos datos, y asi cada uno es un como una lista de obejtos que pueden ser datos personales.
	let miembros = [
		{
			dni:999999
			nombre: "juan"
		},
		{
			dni: 8888888
			nombre: "dolores"
		},
	]
	y asi tenes dos bloques dentro de un arreglo.
	
	Un buen ejemplo puede ser:
	para verificar una condicion, en cualquier tipo de funcion, podes poner que un usuario pide dni:
	
	miembros.forEach(usuarrio => {
		if (documento == miembros.dni){
			return true
		}
	})
	
	bla bla bla, basicamente, esa condicion va a recorrer el array de miembros, y va a fijarse el dni de cada bloque que haya, asi si coincide con tu pseudo base
	de datos, entonces te lo toma por bueno.(Despues si queres hacer eso, fijate ma o menso como es, no confio en que funque bien ese codigo.)











    




























