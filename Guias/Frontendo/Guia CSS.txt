Teorica MUY basica: 
    Un codigo de css normal consta de:
    selector: Dice a que elemento te dirigis.
    property: Las diferentes caractiristcas que podes poner (font,color,background,etc)
    Value: El valor elegido pa la propiedad.

    h1 {
    color: blue;
    font-size: 12px;
    }
-----------------------------------------------------------------------------------------------------------------------------
Selectores:
  Hay 5 categorias de selectores:
  Simples: 
    Nombras el elemento, la clase, el id, cualquiera de esos que es super facil.

    id --> un elemento del html, SOLO UNO, va a tener un id especifico, y para referirte a este, se usa #nombreId.

    class --> cualquier elemento que tenga una class, es como un id, pero podes tener muchos elementos con una misma
    clase, y un elemento puede tener mas de una clase, class= "primerClase segundaClase", palabras unicas separadas,
    y para referirte a una clase en css es: .nombreClase , un punto y seguido el nombre de la clase. Y podes elegir solo
    elementos que tengan esa clase asi: elemento.clase {}, o con un ejemplo: div.parrafo1. algo ase.

    Selector universal: (*), el signo de multiplicacion, le aplica lo que pongas dentro a toda la pagina, suele ir al 
    principo del css, sirve pa normalizar y cosas ase. ej: *{color:red}.

    agrupacion selectores: Si queres que muchos elementos distintos tengan lo mismo, podes agarrar, escribir el nombre
    del elemento y separar con coma uno de otra, y asi te referis a todos los elementos que escribas. 
    ej: h1, h1, p {afjjfsafsad}
  
  Combinator:
    Es "algo" que explica la relacion entre 2 selectores.

    descendant selector: Se usa con un "espacio" entre 2 elementos, al hacer esto, elegis a todos los elementos dentro 
    de un elemento que elijas, funciona como un efecto a todo lo que este dentro del bloque de codigo ese, si quiero cambiar
    todos los <p> dentro de un <div>, hago asi : div p {asdasda}, basicamente le dije que afecte a todos los p dentro de div.

    child selector: ">", selecciona los elementos que son hijos de un elemento especifico, pero tienen que estar directamente
    debajo de div, si estan dentro de otro mini bloque mas o lo que fuere, dejan de ser hijo directo, y por tanto no lo afecta
    , si tenes un div, y adentro 3 <p>, si uno de los <p> esta dentro de otra cosa, a ese no lo afecta.
    div > p {}, eso significa todos los hijos de div que son p.

    Adjacent Sibling Selector: "+", Se usa para selecionar un elemento que esta justo debajo de otro elemento, los 
    elementos hermanos deben tener el mismo elemento padre, y Adjacente significa "directamente seguido", este es 
    un toque complicado, porque si tenes un div, este no va a afectar lo de adentro de div, va a afectar al elemento que 
    este debajo del div, sirve para especificar un elemento que empieza cuando termino el anterior.

    General Sibling Selector: "~", El selector de hermanos general selecciona TODOS los elementos que estan despues
    de un elemento especificado, es como el anterior, pero en banda. Si tenemos un div ~ p, significa que cuando
    termine el div, absolutamente todos los <p> que esten debajo van a ser afectados.

 Pseudo-clases y elementos:
    Hay un millon de pseudo clases, googlea cuando necesites.
    Se usan para definir un "estado especial" de algun elemento, como que le pasen el mouse encima y ase.
    sintaxis:
    selector:pseudo-class {
    property: value;
    }
    Se pueden mezclar con las clases de HTML--> div.brillar:hover, elige a los div con clase brillar cuando le pases el mouse encima.

    El :first-child Pseudo-class: Aca, pones un elemento al principio, y lo que va a hacer es que, cuando el elemento que hayas
    puesto aparezca JUSTO como lo que sigue dentro del elemento, onda, abris un div, el primer elemento, si el primer elemento
    dentro de ese div es el elemento que pusiste, entonces se dirije a ese, pero si de casualidad hay otro elemento antes, este
    se vuelve el segundo elemento y no cumple, es una condicion endemoniadamente especifica.

    Elementossssss: Sirven para poner estilos en partes especificas de un elemento como las primeras letras de tal cosa y ase.

   Todas las pseudoclases: 
    
    :active	a:active	Selects the active link
    :checked	input:checked	Selects every checked <input> element
    :disabled	input:disabled	Selects every disabled <input> element
    :empty	p:empty	Selects every <p> element that has no children
    :enabled	input:enabled	Selects every enabled <input> element
    :first-child	p:first-child	Selects every <p> elements that is the first child of its parent
    :first-of-type	p:first-of-type	Selects every <p> element that is the first <p> element of its parent
    :focus	input:focus	Selects the <input> element that has focus
    :hover	a:hover	Selects links on mouse over
    :in-range	input:in-range	Selects <input> elements with a value within a specified range
    :invalid	input:invalid	Selects all <input> elements with an invalid value
    :lang(language)	p:lang(it)	Selects every <p> element with a lang attribute value starting with "it"
    :last-child	p:last-child	Selects every <p> elements that is the last child of its parent
    :last-of-type	p:last-of-type	Selects every <p> element that is the last <p> element of its parent
    :link	a:link	Selects all unvisited links
    :not(selector)	:not(p)	Selects every element that is not a <p> element
    :nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
    :nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
    :nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
    :nth-of-type(n)	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
    :only-of-type	p:only-of-type	Selects every <p> element that is the only <p> element of its parent
    :only-child	p:only-child	Selects every <p> element that is the only child of its parent
    :optional	input:optional	Selects <input> elements with no "required" attribute
    :out-of-range	input:out-of-range	Selects <input> elements with a value outside a specified range
    :read-only	input:read-only	Selects <input> elements with a "readonly" attribute specified
    :read-write	input:read-write	Selects <input> elements with no "readonly" attribute
    :required	input:required	Selects <input> elements with a "required" attribute specified
    :root	root	Selects the document's root element
    :target	#news:target	Selects the current active #news element (clicked on a URL containing that anchor name)
    :valid	input:valid	Selects all <input> elements with a valid value
    :visited	a:visited	Selects all visited links
    All CSS Pseudo Elements
    Selector	Example	Example description
    ::after	p::after	Insert content after every <p> element
    ::before	p::before	Insert content before every <p> element
    ::first-letter	p::first-letter	Selects the first letter of every <p> element
    ::first-line	p::first-line	Selects the first line of every <p> element
    ::marker	::marker	Selects the markers of list items
    ::selection p::selection	Selects the portion of an element that is selected by a user
-----------------------------------------------------------------------------------------------------------------------------
Nombrado de clases:
    BEM, block-element-modifier, tenes un bloque, le pones una clase y a los hijos del 
    bloque le pones la clase del bloque mas el nombre del element:
    <nav class="navbar"> <ul class="navbar__menu"> <a class="navbar__link">
-----------------------------------------------------------------------------------------------------------------------------
background:
    background-color
    background-image --> url()
    background-repeat -->repeat-x; si horizontal,repeat-y;la otra, Tambien ta: no-repeat.
    background-attachment --> fixed (no baja con la pagina), scroll (si baja)
    background-position--> right top.
    background (shorthand property) ---> Hace todos los demas juntos, vas poniendo los valores en orden y basta, no importa si faltan.
    opacity: puede tomar valores de 0 a 1 o 0 a 100%
-----------------------------------------------------------------------------------------------------------------------------
Normalizacion de estilos:
    Los navegadores tienen efectos predeterminados llamados user agent styles, y cada navegador puede definir
    el estilo como le pinte, por lo tanto, pueden cambiar cosas de nuestro css dependiendo navegadores, para
    evitar esto, se normalizan, es decir, restablecer los estilos por defectos del nav, podes sacarlos de 
    google si queres normalizar todo (necolas.github ---> Normalize) o podes hacerlo manualmente:
    1er: Sacar margenes y rellenos por defectos, todo elemento lo suele tener, para normalizarlo de entrada
    todo, usamos el selector universal * y hacemos: margenes, padding y boxsizing, toma el tamaño del elemento
    , con border-box, si le pones el margen o relleno, el margen se hace hacia adentro de la caja, el contenido
    queda mas adentro de la caja, mientras con context-box, es que si le cambias alguna de estas, cuando 
    agregemos un margen, va a encajarlo fuera de la caja, aumentando su tamaño y espacio que ocupa, por tanto
    si acomod algo, y cambio ese margen, me mueve todo, conclusion: border-box > context-box. Las pseudo clases
    before o after ayudan (googlealo)
    
    *,
    *::before
    *::after{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    2do
    le saco el subtitulo a los enlaces, hago que en principio midan lo mismo, despues lo cambiare, 
    lo mismo con el color, inherit toma el heredado, en principio toma la del html.
        a{
            text-decoration: none;
            font-size: 2px
            color: inherit
        }
    
    3ro
    A las listas les saco los numeros para que no molesten en principo, despues se los encajo si quiero.
    ul, ol {
        list-style-type: none;
    }
    
    4to
    parrafos tamaños generico
    p{
        font-size: 1.8em;
    }
    
    5to
    html, etiqueta raiz, todos los estilos heredables que pongamos se encaja a todo, se le suele poner un 
    valor de fontsize de 62.5% porque es una buena practica. Al hacer esto, las unidades de em se ponen en 
    1.8 em, mas simple para los calculos.
    html {
        font-size: 62.5%
        font-family: "laQuePinte"
    }
    
    5to
    
    header,footer {
        font-family: "OtraLetra"
        Color: elQuePinte
    }
    
    6to
    creo una clase utilitaria, la que tenga esta clase va a evitar que se pase de los costado, y el margen al ser 0
    auto, calcula automaticamente, y es una clase reutilizable.
    .container{
        max-width: 1200px;
        margin: 0 auto;
    }
-----------------------------------------------------------------------------------------------------------------------------
Borders-stlye:
    dotted - Defines a dotted border
    dashed - Defines a dashed border
    solid - Defines a solid border
    double - Defines a double border
    groove - Defines a 3D grooved border. The effect depends on the border-color value
    ridge - Defines a 3D ridged border. The effect depends on the border-color value
    inset - Defines a 3D inset border. The effect depends on the border-color value
    outset - Defines a 3D outset border. The effect depends on the border-color value
    none - Defines no border
    hidden - Defines a hidden border

    Border Width: pueden ir cosas como solid y medium, o 15px 20 px (el primer parametro es altura, el segundo ancho, todo borde).
    border Color: Simple.
    border-top-style: dotted;
    border-right-style: solid;
    border-bottom-style: none; --> no muestra ese lado.
    border-left-style: solid;

    EXISTE SHORHAND DE border y de border-top, y van en orden de witdh, stlye y color, si lo haces con border solo, entonces
    te van a salir todos los bordes asi, si lo haces con un borde especifico como seria top, solo dibujas ese.

    border-radius: 1 valor solo hace las 4 iguales, creo.
-----------------------------------------------------------------------------------------------------------------------------
Agregar Fuentes:
    Forma cheta, import@link de google fonts.
   2 formas: (con google fonts.com)
    online: vas a la pagina, copias el link cuando elegis una de las letras, metes eso en el head de tu html, y despues
    usas el nombre de la letra para llamarla cuando quieras.
    local: Vas a la pagina, descargas en vez de copiar, descomprimis los RAR, y tenes que linkear desde CSS,
    usando @font-face {} , adentro, pones primero font-family: elnombreque te pinte, y despues pones
    src: url(), y dentro del parentesis ubicas los archivos http o algo asi (blancos) que descomprimiste,
    y ahi podes llamar a la font por el nombre que le hayas puesto.
-----------------------------------------------------------------------------------------------------------------------------
Flexbox:
 Bien hecho, es posicionamiento de forma automatica 

    Pagina pa probar con flex: FLEX FROGGY Y FLEX FROGGY

    Para manejar cada elemento del flex, le metes los datos que queres con una class
    es un sistema de elementos que usa mecánica mas potente limpia y flexible en la que los elementos de html se adaptan y fluyen automáticamente
    a diferencia de display que movía cosas de forma particular, el flex usa un sistema doble, le da al elemento padre la capacidad de convertirse en un 
    contenedor flex, y hacer que los hijos hereden características del padre, posiciones etc.

    Ejes: utiliza ejes cartesianos X,Y, columnas y filas. Dependiendo de como este establecido el comportamiento del flex, cambia que parte son sus ejes.

    Si quiero que alguna parte de mi css se comporte como flex, tengo que declararlo en sus atributos como "display: flex;" 

    Atributo: flex direction valores", tan row que es en linea, row reverse, column y column reverse.
    Atributo: wrap atributo que permite que pasen o no de la linea actual en la que esta el Flexbox
    shorthand Atributo: : flex: flow row wrap;

    Gap: espacio desde los bordes
    Orden:cambiar el orden de los elementos, se le aplica al hijo. (googlealo por dudas)

    Atributo: Flex grow:de que manera proporcionalmente se van a comportar los elementos cuando tienen espacio adicional disponible para los hijos, es una
    propiedad y su valor es un numero entero que indica a cuanto corresponde.

    Atributo: Flex shrink:Funciona como grow, pero al revés, es cual se va achicar antes  como.

    Atributo: Flex basis Mas cambios dependiendo de lo que pase con el tamaño de pantalla, very responsive.

    Atributo: flex es la propiedad que mete las 3 anteriores juntas

    Alineaciones: Son la magia de Flexbox, si estarías o moves de alguna forma que cambie el ancho, podes elegir como se mueve.

    Atributo: justify-content como se mueven los elementos de flexbox en eje X.
    Atributo: align-items como se mueven los elementos de flexbox en eje y.
-----------------------------------------------------------------------------------------------------------------------------
Grid,Evolución del flex: 
    (sistema de grillas) 
    https://css-tricks.com/   <---- PAGINA GUIA PA GRID

    A diferencia de flex, donde posicionamos todo en una dimension, grid tiene la posibilidad de hacerlo en horizontal y vertical al mismo tiempo,
    2 dimensiones, toma las ventajas de flex para usar un sistema mas potente que nos permite usar grillas o cuadriculas de manera sencilla.

    Utilidad 2 dimensiones, nos permite trabajar en filas y columnas, una tabla, y podemos calcular anchos y altos, diferencias, personalización
    de cada elemento hijo, y todo como en flex que se transforma como queres.
    Ejes, son ejes fijos, el main axis es el eje x, y el cross axis, el Y.

    Para comenzar, declaramos el contenedor padre, con un display grid, y despues declaramos la cantidad de filas y columnas:

    Propiedades, tiene 2 componentes, el contenedor y los items, y pa empezar a hacer un grid
    1. Display: grid; al bloque con el que tenga esa class.
    2. Grid-template-columns y grid-template-rows, asi declaras en pixeles la cantidad de columnas y filas, ej( 100px 300px 200px) eso son 3 o columnas 
    o filas, le pones la medida de la columna o fila, y tenes 3 de esas, la primera con ancho 100, segunda 300, tercera 200. Si declaro digamos, 3 columnas
    y tengo mas elementos que pasan las 3 columnas, la ultima columna con los elementos que sobran, van a estar con el minimo tamaño que pueden estar.
    3.fractions: Fr (fraction) es una unidad que divide el espacio disponible entre la cantidad de fr declarados y los reparte proporcionalmente, agarra
    la dimension que necesita, agarra el ancho total y lo divide entre la cantidad de columnas o filas que tenga basado en fr, ejemplo (1fr 2fr 1fr),
    van a ser filas o columnas, donde la primera y la ultima van a ser la mitad de ancha o larga que la del medio, porque esa vale 2fr. Mantiene la 
    proporcionalidad entre ellos, siempre el primer elemento va a ser 1fr, por tanto, la mitad de 2f, y asi, y ocupa todo el ancho o alto disponible,
    en vez de calcularlo manualmente, se adapta.

    4. Repeat: si tenemos una plantilla con muchas filas y columnas del mismo tamaño, podemos usar repeat(cantidad,tamaño); para aclarar cuantas columnas
    o filas queres que se tomen, y en tamaño, como queres que sean.

    5. Gap funciona como en flexblox, espacio entre bloques del grid o flexblox.

    Grid por valores: Podes decirle a grid que:
    1. Grid-column-start y decis dodne queres que empiece la columna (la primer columna se dibuja entre la linea 1 y 2, la segunda 2 y 3,etc.)
    grid-column.start: "donde quiero que empiece(valor numerico);

    2. Grid-column-start y decis donde queres que termine la columna (la primer fila se dibuja entre la linea 1 y 2, la segunda 2 y 3,etc.)
    grid-column.start: donde quiero que termine(tambien numerico)
    1 y 2. Si decis grid-row/column (la barra es o uno o el otro, no ambos), pones gri etc: valor / valor;

    3. Span: Extendete o "utiliza x columnas", me expando a X columnas/filas, si le digo en cual empieza, span le dice cuanto se extiende.
    Es parte de lo de arriba grid star y end.

    4. shorthand: grid-area, le decis 4 unidades, primera: fila donde empieza, segunda  : columna donde empieza, tercera: fila donde termina, cuarta:
    columna donde termina.
    ej: grid-area: 1 / 2 / 2 span / span 3. row-star/col-start/row-end/col-end.

    Areas: Maquetado moderno
    1. Necesita que definas el grid area, y donde lo vas a utilizar:
    .grid-container{
        display: grid;
        row, col...
        grid-template-areas:
        "navbar navbar"
        "main sidebar"
        "footer footer"   básicamente le dijiste al grid que se divida en esos nombres que pongas. Cada parte tiene un nombre para referirse, se 
                        repiten los nombres dependiendo de cuantas filas hayas usado, este ejemplo tiene 3 filas y 2 columnas, pongo navbar
                        2 veces porque quiero que ocupe 2 columnas, si lo pongo 1 vez, queda el espacio de arriba a la izquierda sin nombre.
                        Es una cuadricula y le pones nombre en especifico a cada parte uno por uno.
    }
    2. Después de definirlos, podemos estar en css y editar cada uno de los elementos escribiendo:

    header {
        grid-area: navbar;
    }

    elijo mi contenedor, defino las areas que va a tener y después voy a los selectores y le digo que a cada elemento haga tal cosa.
    Grid area es la mejor forma de usar grid, si te pinta hacer un CSS, aprende a usarlo, es moderno.

    Alineaciones: 
    Alineación de items:
    Son como en flex, muestra como se alinean los items:
    justify-items: elegís como queres que se desplacen los items dentro de cada grid, si a la izquierda, derecha, medio, etc.
    align-items: elegís como queres que se desplacen los items en los grid en forma vertical.
    Place-items: shorthand de justify y align, ambos al mismo tiempo con un solo valor.

    Alineación de contenido: 
    Los bloques enteros:
    place-content: valores....; 

    Self: mover item dentro de su grid pero solo a uno, no mueve todos los items, mueve solo al elegido:
    places-self, align-self, y asi con self.

    ------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Diseño Responsive: Diseño que se adapta al dispositivo mostrado. 

    Etiqueta Meta: Viweport, ajusta el tamaño de la pagina web pa que se ajuste a múltiples pantallas NUNCA FIJES VALORES ABSOLUTOS para 
    las paginas, el viewport arregla todo lo relativo, lo fijo se mantiene y es choto.

    Diseño moderno: Mobile First, se piensa en los diseños teniendo en cuenta los tamaños de celulares para ir adaptándolo a los estilos
    del sitio y despues se piensa en la pagina web. 

    Diferencia clave entre Responsive y Adaptive: El responsive cuando cambie de tamaño y pantallas, va a moverse de forma fluida, se va moviendo
    con la pantalla, ej: si la pantalla se hace mas chica, la pagina va a seguir frame a frame los bordes de la pantalla y va a estar todo el tiempo
    visualmente bien. El adaptativo tiene cambios marcados, si haces mas chica la pantalla, va a esperar a que termine el cambio, va a seguir viendose 
    igual hasta que llegues a la nueva pantalla, y ahi se ajusta de golpe, se ve mas clunky.

    El uso de unidades relativas como porcentajes, rem, em, vw (viewing witdh, %) y vh (viewing height, %), sirven como proporciones dinamicas, y
    asi evitamos estructuras rigidas. Al mismo tiempo se aconseja el uso de los atributos "max/min-width", para pantallas super largas, que en estos casos, si tenemos
    estructuras relativas hasta el final, puede desconfigurar todo, ej, un parrafo, si es una pantalla muy larga, quizas lo que serian
    2 renglones queda en un solo renglon muy largo y es feo.

    Aplicar responsive: Se usa mucho flexbox y grid, y tambien el uso de "media queries" Y breakpoints predefinidos para establecer que
    debe hacer nuestro diseño cuando se esta deformando.

    Estos son bloques de codigo condicional, donde se escribe css que se use solo
    si se cumple la condicion/regla. ej: 
    -Palabra clave @media, 
    -Screen es el "medio" donde se aplica (estan screen, para monitores, print,
    para documentos de medios impresos o pantallas de previsualizacion, speech, para no videntes, y queda all, el que se utiliza por
    defecto), 
    -and
    -(La condicion entre parentesis), pueden ser max/min-width o height, landscape, portrait, device-witdh, etc.
    -Abris llave para el bloque de media querie, y despues podes hacer lo que quieras ahi de css, es un bloque que solo se va activar
    en caso de que la condicion suceda:

    @media screen and (min-witdh: 900px) and (max-width: 1024px) {
    div {
        background-color: aqua;
    }
    }

    Se pueden poner muchas media-querie a un mismo elemento, y a cada una la condicion que pinte.
-----------------------------------------------------------------------------------------------------------------------------
DOM
	Conexion de javascript con HTML.
	Documento object model es la representacion que hace el navegador de los elementos de 
	un documento html. Esto nos permite navegar con javascript a traves de esta estructura
	en forma de arbol. 
	Nodos:
	El dom es un arbol de elementos donde cada elemento es un NODO, pueden ser etiquetas,
	atributos, texto, comentarios o el mismo document, que es el NODO principal del DOM.
	Se abre como una especie de arbol, sale del document y baja a root element, que es el html 
	y asi.
	
	Tipos de NODOS:
	document: representa el nodo raiz (es un objeto)
	attr: representa el atributo de un elemento
	comment: nodos de comentario
	element:representa una equitqueta html
	
	
	Representacion del DOM: (hay una imagen), pero digamos que es como cuando estas en 
	los ajustes de nvidia, que tocas una carpeta y abre para abajo lo que tenga, es igual.
	
	acceso al dom:
	javascript nos provee METODOS NATIVOS para acceder a los distintos nodos y sus props,
	
	getElementByld("blog"): trae el nodo con el elemento id blog
	querySelector("li") ---> busca bien que hace en el apunte de DOM, pero lo que mostro es 
	que poniendo dentro li, mostraba los li del documento como un array. El querySelector funca
	con todos los selectores de css, y es mas comodo porq si tenes cosas super especificadas, 
	es como usar el mismo nombre pa buscarlo.
	
	Acceso al DOM: podes seleccionar un elemento con los getElemento o querySelector.
	Al hacer eso, podes guardar elementos y guardarlos en una variable para poder 
	trabajar con ellos.
	
	let prueba = document.querySelector("li"), asi guardaste al primer li del html que tengas.
	entonces podes cambiair cosas como el color asi:
	prueba.style.color = "blue" , eso cambio el color de ese li
	
	Modificar DOM: MUY IMPORTANTE, ACA ES COMO PODES CAMBIAR COSAS DEL HTML.
	podes crear elementos y nodos, primero un nodo de etiqueta, y despues....
	creatElement("div")
	padre.appendChild(hijo)
	crearTextNode("hola mundo")
	
	Eventos:
	Son acciones que suceden en el navegador, que afectan directamente a los elementos del DOM
	que podes detectar a traves de distintos metodos de javascript, aca se suelen usar callbacks
	, como si el usuario hizo click a alguna lado, tal cosa.
	
	Event handlers: Manejadores de eventos:
	son los metodos que existen para reaccionar frente a tdistintos eventos que se produzcan en
	el navegador:
	node.addEventListener("eventType",callback) utilizamos el metodo de addEventListener 
	sobre el nodo y pasamos el tipo de evento y una funcion de callback como parametros.
	
	node.eventType = () => {callback} Accedemos al metodo del tipo de evento del nodo
	seleccionado y le asignamos una funcion a ejecutar cuando se realice el evento.
	
	hay una mas para meterlo en html, pero es muy mala idea.
	
	Event Types: Hay un millon. 
	mouse.evento--> buscalos todos en w3school.
	keyboard eventos --> ||   ||    ||   ||
	
	
	const listTemporalTareas = document.querySelectorAll("li:not([style ]))
-----------------------------------------------------------------------------------------------------------------------------
Asincronismo
Un pedido de un proceso o ejecucion de algo que no es ejecutado instantaneamente cuando se lee,
digamos que son funciones que pasan cuando se cumplen ciertas condiciones, como pueden ser eventos
o llegada de cosas especificas, como pedir a otra compu, programa o servidor, y no vamos a saber
cuanto tiempo le va a tomar que eso que pedimos llegue, cuando estamos en asinctrono, por el 
unico hilo de ejecucion, si alguna sentencia bloquea el hilo, todo lo demas que esten abajo
o "detras" se demora, bloqueando la ejecucion del programa.
JavaScript dispone de un solo hilo de ejecución (single thread), por lo que es fácil que 
se generen bloqueos. Cuando una operación es bloqueante, no puede ejecutarse  más de una 
tarea al mismo tiempo o en paralelo. Javascript posee la capacidad de manejar procesos 
bloqueantes.

ejecucion sincrona, lo ejecuta, toma tiempo que consiga la respuesta, y la devuelve, todo en 
orden y no podes pasar a otra orden en el proceso. Entonces, si fuese una suma de tiempo, 
el tiempo va a ser el total de todas las funciones una despues de otra, 1 funcion, 1 tiempo.

ejecion asincrona: La ejecución de nuestro programa es dinámica. Cuando definimos un proceso
 asíncrono, el programa sigue su camino hasta que es avisado que un proceso anterior ha 
 finalizado. Capturamos el resultado y lo utilizamos, sin bloquear la ejecución de nuestro código
 Entonces, si fuese una suma de tiempo, suma lo que sea sincrono, y el pedido asincrono, lo busca
 al mismo tiempo, y cuando llegue lo encaja como queres, entonces, basicamente, busca al mismo
 tiempo que lee el resto del codigo, por lo que toma menos, la respuesta llega cuando este lista
 no esperas a que lo cargue para cargar lo demas.

 Asincronía en Javascript
CallStack
Apila las tareas a ejecutar a medidam que va leyendo el código. Si una tarea posee otra
 tarea dentro estas entran en orden ascendente y se resuelven en orden descendente.

Event Loop
Recibe tareas asíncronas, las envía a la cola de tareas (callback queue) y las devuelve al 
callstack una vez resueltas.

setTimeOut(): Es una función nativa que nos permite generar un delay (retraso) en la ejecución
de un proceso de nuestro programa.
Recibe como primer parámetro una función a
ejecutar y como segundo, el tiempo que debe
transcurrir para que eso suceda expresado en
milisegundos.

setTimeOut(callback.ms)

setTimeOut(() => {
    console.log("holamundo");
}, 1000ms)


También podemos utilizar clearTimeOut()
para cancelar el retraso producido por
esta función. Podes ponerle un evento al timeOut.

setInterval()
Similar a la anterior, pero en este caso nos
permite ejecutar una función cada
determinado bloque de tiempo.
Recibe como primer parámetro una función a
ejecutar y como segundo, cada cuanto tiempo
debe repetirse su ejecución.
Utilizando clearInterval() cortamos la
ejecución del proceso.

Ahora con los temporizadores, vamos a hacer que un callback se demore lo que tenga que demorar
sea el tiempo que sea, por eso lo vamos a escribir de la siguiente forma: Promesas:

Promesas
Promesa de que va a ser completada en un futuro.
Programamos que vamos a pedir y que pase una vez llegue la respuesta.

Si bien la forma primitiva de manejar procesos
asíncronos en Javascript son los callbacks, hoy en día
ya no se utilizan como tal, sino que en su lugar se
encuentran las promesas.
Una promesa es algo que, en principio pensamos que
se cumplirá, pero en el futuro pueden ocurrir varias
cosas.

Pending: Apenas pedida la promesa, entra en este estado.
La promesa se queda en un estado incierto
indefinidamente (promesa pendiente)

Fullfilled: Devuelve un resultado, no necesariamente lo que quieras, pero devuelve algo.
Por ejemplo, pedis un ID, y te dice que no esta el id, eso es una respuesta.
La promesa se cumple por ende, queda
resuelta y devuelve el resultado.

Rejected: No hay respuesta como tal, no te volvio nada.
La promesa no se cumple, lo que significa
que fue rechazada y arrojará un error.

Crear una promsesa: se usa el obejto promise que recibe dos parametros, necesita la palabra 
new porque se trata de un objeto. Si tenemos una función donde sabemos que la respuesta de su
ejecución puede no
ser inmediata, necesitamos retornar una
promesa.
En este caso, como nuestra función
demora 4 segundos en devolver el texto, es
necesario crear una promesa.

Si intentamos ejecutar nuestra función e
imprimir el valor por consola, nos
encontraremos con un problema.

Esto sucede porque el console.log() intenta
imprimir el resultado de esperar() de
inmediato, en lugar de esperar los 4
segundos.

Manejo de Resultados
Para poder manejar el resultado de una
promesa debemos hacer uso de 3
métodos especiales.
Ellos son:
.then(): que recibe como parámetro el
resultado de nuestra promesa. Captura la respuesta de la promesa que viene cuando sea.

.catch(): que recibe como parámetro el
error en caso que sea rechazada.
.finally(): recibe un callback que se
ejecutará aunque la promesa falle o se

Async/Await : Esta es una nueva sintaxis que nos permite trabajar
con nuestras promesas evitando seguir una
metodología tan estructurada.
Para eso utilizaremos las palabras reservadas async y
await.

Manejo de errores con try/catch
Antes de ver async/await es importante
conocer el bloque try/catch para el
manejo de errores en nuestro código.
Si bien, este bloque no es exclusivo del
asincronismo se utiliza muy seguido en
estos casos.
Con try/catch le vamos a indicar a nuestro
programa que debe “intentar” ejecutar el
código dentro del try pero en caso de fallar
debe devolver la respuesta dentro del
catch.

try preejecuta el bloque a ver si hay algun error dentro del bloque, si hay alguno, le manda ese
error al catch

Nuestra función esperar() devuelve una
promesa, por lo tanto mediante las palabras
reservadas async/await reemplazamos el
uso de los métodos .then() y .catch().

Trabajar con promesas nos permite manipular los procesos asíncronos de nuestro
código.
Siempre que tengamos un proceso que devuelva una promesa podemos utilizar
las siguientes 2 variantes para manipular su resultado:
then/catch/finally async/await + try/catch

















